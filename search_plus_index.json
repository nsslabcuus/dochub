{"./":{"url":"./","title":"Introduce the dochub","keywords":"","body":"What is the dochub? We use this web page to share the development work in the team. How to use this dochub? Clone the repo git clone git@github.com:nsslabcuus/dochub.git Add new page GitBook uses a SUMMARY.md file to define the structure of chapters and subchapters of the book. The SUMMARY.md file is used to generate the book's table of contents. The format of SUMMARY.md is just a list of links. The link's title is used as the chapter's title, and the link's target is a path to that chapter's file. Adding a nested list to a parent chapter will create subchapters. Simple example # Summary * [Part I](part1/README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) * [Part II](part2/README.md) * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) Each chapter has a dedicated page (part#/README.md) and is split into subchapters. Anchors Chapters in the Table of Contents can be pointing to specific part of a file using anchor. # Summary ### Part I * [Part I](part1/README.md) * [Writing is nice](part1/README.md#writing) * [GitBook is nice](part1/README.md#gitbook) * [Part II](part2/README.md) * [We love feedback](part2/README.md#feedback) * [Better tools for authors](part2/README.md#tools) Parts The Table of Contents can be divided into parts separated by headings or horizontal lines: # Summary ### Part I * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) ### Part II * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) ---- * [Last part without title](part3/title.md) Parts are just groups of chapters and do not have dedicated pages, but according to the theme, it will show in the navigation. Example of a chapter file # Title of the chapter This is a great introduction. ## Section 1 Markdown will dictates _most_ of your **book's structure** ## Section 2 When you add you new markdown file page and add the index in the SUMMARY.md, please push to the repo, and the travis-ci will build the new web-pages within two minutes. You can check the webpage. https://nsslabcuus.github.io/dochub/ There is a link about the markdown grammar and gitbook. Learn Markdown Learn Gitbook By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/summary/summary.html":{"url":"virus_analyze/summary/summary.html","title":"Summary","keywords":"","body":"TODO: You need to write something..... By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-03-06-Github-Repo-Link.html":{"url":"virus_analyze/2019-03-06-Github-Repo-Link.html","title":"Repo Information","keywords":"","body":"Virus_Analyze Project Repo Dataset Repo This repo is a private repo. Please let me know if you can't access to this address. Malware dataset git clone git@github.com:guozetang/IoT-Malware-Dataset-App.git dataset The dataset include: Old Dataset New Files from Github Repo Normal Dataset git clone -b normal-dataset git@github.com:guozetang/IoT-Malware-Dataset-App.git normal-scripts Systemcall Dataset git clone -b systemcall git@github.com:guozetang/IoT-Malware-Dataset-App.git systemcall Evaluation Evaluation Dataset git clone -b evaluation git@github.com:guozetang/IoT-Malware-Dataset-App.git evaluation Application Repo Application Repo git clone git@github.com:nsslabcuus/virus_analysis.git By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-01-29-How-to-Install-application.html":{"url":"virus_analyze/2019-01-29-How-to-Install-application.html","title":"Installation Instructions","keywords":"","body":" By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-02-08-Introduce-Application.html":{"url":"virus_analyze/2019-02-08-Introduce-Application.html","title":"Application","keywords":"","body":"Application Framework This application based on MVC design pattern. Bash Parser: Deal with the bash script, and get the AST grammar tree from the bash script code. Script Data: Analyze tool for the Bash scripts commands. (Count the Linux Commands) Virustotal: Based on the MD5 value for each bash script file to get the scripts detail information from the virtual total website. Graph: Generate the dot and pdf graph from the bash parser output. Database: Use sqlite3 in the python3.5 to save the scripts information in the database. Data Drive: Use the XML file to drive the application, then it is easy for us to change the configure in the application. Instruction Manual Run Application When you first time to run this application in your computer, you need to download this application and set up the data set in the project root folder. Setup Environment(Only First time) git clone git@github.com:nsslabcuus/virus_analysis.git cd virus_analysis/virus_analysis_app ./setdataset.sh When you run the ./setdataset.sh bash script, this script will download the dataset from the GitHub repository if you have the permission to access this data set repository. Please use python version > 3.5 python3.5 main.py The main window will show like the followed picture. Search function Now you can search by ID, Importance, Urgency, Property, Tags, Read, Date. There is some information about the Name, Property, and Tags. Name: The scripts file name in the file system. You can open the script file by Edit-->Open Script Code. By the way, you need to choose one of the script files in the table firstly. Property: The field was added by the graph analyze tool, it added some information about this scripts. Please look at the information about this feature. BashGraph Tags: You can edit it by yourself, and add some identifier for each script you want to focus. When you use the search function, you can choose one of them to search. The input data is a string. You can search two keywords together using split symbol ,. There is an example. Menu bar File New Repository: Build a new repository and import a new dataset. Open Repository: Open an existing repository and change the database. Save as JSON: Export the search result to a JSON file. In the project root folder, you can find .cache/output.json file. Edit Edit information: Change the script information in the dataset. You can change the Importance, Urgency, Property, Tags, Read, Date. Show Tags: Get all the tags which you used in this repository. Show script Path: Get the script path which you choose in the table. Show All commands count: Get all the commands from all scripts in this repository. Show All Linux commands count: Get all Linux commands from all scripts in this repository. Show Commands Count: Get the commands count for one Bash scripts. Open Scripts code: Open the script's code by gedit application. Open Scripts Graph: Generate and open the script graph by evince application. Scripts Detail: Get the detail information about this scripts information from the virtual total website. Tools Generate All Commands Graph: This use to generate all the dot files for scripts in this repo. Update Script property: Update all the scripts property in this repository. By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-01-29-Application-API.html":{"url":"virus_analyze/2019-01-29-Application-API.html","title":"Application API","keywords":"","body":"Scriptdata API inquiryCommandInfo inquiryCommandInfo(command) is an API for the user to get the command information. The output is a dictionary data structure. output data structure: If this is a built-in Linux Command. { \"name\":\"basename\", \"text\":\"basename $dir\", \"category\": \"filesystem\", \"filename\":\"\" }, If this is a network Linux Command. { \"name\":\"wget\", \"text\":\"wget -o BINARY_FILE\", \"category\": \"network\", \"downloaded\": \"True\", \"filename\":\"fysxe.xy\" }, If the downloaded parameter is True and, the text will have the text which I suggest to changed. Otherwise, if the downloaded parameter is not true, don't check the filename information, just keep the original command information in the graph. { \"name\":\"ssh\", \"category\": \"network\", \"downloaded\": \"False\", \"filename\":\"\" }, If this is an Unknown Command. { \"name\":\"doingsomething\", \"text\":\"doingsomething in the bashscript\", \"category\": \"unknown\", \"filename\":\"\" }, If this is an Unknown command, we don't do the other work now.\\ If this is a Binary file. { \"name\":\"fysxe.xy\", \"text\":\"Run BinaryFile\", \"category\": \"binaryfile\", \"filename\":\"\" }, If this is an assignment. { \"name\":\"name\", \"text\":\"x=y\", \"category\": \"assignment\", \"filename\":\"\" }, If this is an condition. { \"name\":\"\\[ True \\]\", \"text\":\"\\[ True \\]\", \"category\": \"condition\", \"filename\":\"\" }, By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-02-04-BashGraph-API.html":{"url":"virus_analyze/2019-02-04-BashGraph-API.html","title":"BashGraph API","keywords":"","body":"BashGraph API load_file load_file is an API for users to load their .out file into the program. This function is usually the first function to be called after an BashGraph object is created. Input: fname: string is a string indicating the path of the .out file. Output: None. make_graph make_graph is an API for users to initiate many internal states of the BashGraph object. load_file must be called before this function. Input: None or arg : Boolean. The arg indicates whether the made graph includes arguments of the commands in its nodes. Default is False. Output: True is successful and False if failed. print_graph print_graph is an API for users to print the .dot file to the standard output. If you want to print it to a file, use something like this: sys.stdout = open(dot_tmp_file, \"w\") g.print_graph() sys.stdout = orig_stdout Input: None Output: False if failed. Otherwise True. get_tags get_tags is an API for users to get all the tags for a bash script. make_graph must be called before this function. The return value of this function is a dictionary. The keys of the dic are the types of tag, and the values of each record are the tags. Input: None Output: False if failed. Otherwise returns a dictionary of set. Each key of the dic is a type of tag. Each record of the dic is a set of tags. Dictionary definition: { \"complexity_tag\" : [\"for\", \"if\", \"while\"] # the value is a set() class. has IF, FOR, WHILE \"error_tag\" : [\"function\", \"case\"] # has FunctionNode, CaseNode \"node_type\" : [\"external\", \"unknown\"] # has external and unknown commands } By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-01-29-Linux-Commans-Classfiy.html":{"url":"virus_analyze/2019-01-29-Linux-Commans-Classfiy.html","title":"Linux Commands Classify","keywords":"","body":"Linux commands classify updated date 04/12/2019 Update the table and the linux command to each scripts link. I have counted all of the commands which are the Linux commands in our bash malware scripts. There are only 112 Linux commands used in these bash scripts. There are two links to the result. commands_linux.json If you want to know which files use the each command, please access the link. commands to each scripts file The second one sorted by the count number. In addition, I have put the commands table as followed. Note: This table is not include all the linux commands. Only cover the basic 570 Linux commands in our data set. No. Linux Command Frequency Classification Number of Files 1 cd 164637 directories 2639 2 chmod 33702 file permissions 2658 3 wget 24326 network 1917 4 rm 24181 file operations 1883 5 cat 10456 file examination 878 6 tftp 8726 network 681 7 curl 4386 network 387 8 echo 3530 shell scripting 118 9 cp 1053 file operations 725 10 chattr 994 Others 21 11 ulimit 701 miscellaneous 700 12 grep 661 searching and sorting 72 13 mv 636 file operations 33 14 touch 445 file operations 31 15 killall 376 process management 35 16 pkill 220 process management 8 17 awk 185 Text processing 39 18 mkdir 167 directories 52 19 sleep 128 miscellaneous 61 20 expr 124 Others 21 21 tar 113 compression 28 22 lp 107 Others 1 23 ps 105 process management 23 24 exit 100 basic shell 65 25 head 99 file examination 26 26 xargs 94 searching and sorting 8 27 cut 93 Shell Programming 32 28 date 82 system information 28 29 sudo 73 users and groups 11 30 hostname 65 multi-user environments 23 31 test 60 Others 25 32 sed 60 regular expressions 12 33 unset 58 shell scripting 14 34 printf 52 shell scripting 2 35 nohup 50 process management 16 36 history 49 basic shell 8 37 read 45 shell scripting 17 38 wc 44 file examination 28 39 ln 42 Others 27 40 uname 38 system information 26 41 whoami 35 users and groups 28 42 find 35 searching and sorting 5 43 pwd 32 directories 29 44 declare 32 Others 4 45 chown 28 file permissions 15 46 kill 26 process management 15 47 sort 25 searching and sorting 13 48 netstat 25 network 14 49 service 24 Others 24 50 mktemp 24 filesystem 7 51 md5sum 23 Others 10 52 export 21 shell scripting 14 53 pidof 20 Others 10 54 perl 20 programming 10 55 tail 19 file examination 7 56 mail 19 network 16 57 ls 18 directories 10 58 lsof 16 filesystem 4 59 crontab 15 miscellaneous 6 60 basename 15 filesystem 8 61 lynx 13 network 1 62 apt-get 13 Others 7 63 id 12 Others 12 64 clear 11 basic shell 8 65 tr 10 Text processing 4 66 which 9 searching and sorting 5 67 uniq 9 searching and sorting 9 68 gzip 9 compression 5 69 stat 8 Others 4 70 gcc 8 Others 5 71 ping 7 network 3 72 usermod 6 Others 6 73 sh 6 Shell programming 3 74 nice 6 Others 3 75 ifconfig 6 network 3 76 dirname 6 filesystem 5 77 set 4 shell scripting 2 78 iptables 4 network 1 79 gunzip 4 compression 4 80 command 4 Others 1 81 trap 3 process management 3 82 sysctl 3 Others 3 83 su 3 users and groups 3 84 strings 3 Others 3 85 let 3 shell scripting 3 86 ftp 3 network 3 87 fold 3 Others 3 88 dig 3 Others 3 89 arp 3 network 3 90 yum 2 Others 2 91 useradd 2 Others 1 92 unalias 2 basic shell 2 93 umask 2 file permissions 2 94 php 2 programming 2 95 passwd 2 users and groups 1 96 nc 2 network 2 97 du 2 file examination 1 98 chkconfig 2 Others 1 99 cdrecord 2 Others 2 100 who 1 Others 1 101 wall 1 multi-user environments 1 102 uptime 1 Others 1 103 readonly 1 Others 1 104 nmap 1 Others 1 105 make 1 build management 1 106 lspci 1 Others 1 107 lastlog 1 Others 1 108 ipcalc 1 Others 1 109 git 1 build management 1 110 file 1 Others 1 111 egrep 1 regular expressions 1 112 chgrp 1 file permissions 1 Reference Linking Bash Shell Reference (manual) How many commands classification used in our project Note: This table is not include all the linux commands. Only cover the basic 570 Linux commands in our data set. No. Classification Commands 1 process management killall, pkill, ps, nohup, kill, trap 2 compression tar, gzip, gunzip 3 Text processing awk, tr 4 file examination cat, head, wc, tail, du 5 miscellaneous ulimit, sleep, crontab 6 basic shell exit, history, clear, unalias 7 directories cd, mkdir, pwd, ls 8 Shell programming sh 9 system information date, uname 10 programming perl, php 11 shell scripting echo, unset, printf, read, export, set, let 12 regular expressions sed, egrep 13 file operations rm, cp, mv, touch 14 users and groups sudo, whoami, su, passwd 15 network wget, tftp, curl, netstat, mail, lynx, ping, ifconfig, iptables, ftp, arp, nc 16 searching and sorting grep, xargs, find, sort, which, uniq 17 Shell Programming cut 18 Others chattr, expr, lp, test, ln, declare, service, md5sum, pidof, apt-get, id, stat, gcc, usermod, nice, command sysctl, strings, fold, dig, yum, useradd, chkconfig, cdrecord, who, uptime, readonly, nmap, lspci, lastlog, ipcalc, file 19 multi-user environments hostname, wall 20 build management make, git 21 file permissions chmod, chown, umask, chgrp 22 filesystem mktemp, lsof, basename, dirname By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-04-19-Commands-Classify.html":{"url":"virus_analyze/2019-04-19-Commands-Classify.html","title":"Commands Classify(New)","keywords":"","body":"Linux commands classify No. Linux Command Frequency Classification Number of Files 1 cd 178691 directories 2884 2 chmod 37389 file permissions 3024 3 wget 27037 network 2191 4 rm 26805 file operations 2146 5 cat 11723 file examination 989 6 tftp 9943 network 777 7 curl 4657 network 416 8 echo 4447 shell scripting 169 9 cp 1244 file operations 827 10 busybox 1011 Others 49 11 chattr 994 Others 21 12 ulimit 797 miscellaneous 796 13 grep 717 searching and sorting 87 14 mv 652 file operations 43 15 touch 445 file operations 31 16 killall 412 process management 44 17 sleep 330 miscellaneous 120 18 ftpget 320 Others 26 19 pkill 229 process management 11 20 awk 221 Text processing 44 21 mkdir 185 directories 65 22 exit 142 basic shell 102 23 printf 133 shell scripting 7 24 tar 130 compression 40 25 sed 126 regular expressions 20 26 expr 124 Others 21 27 pingtest 108 Others 1 28 lp 107 Others 1 29 ps 106 process management 24 30 head 100 file examination 27 31 xargs 94 searching and sorting 8 32 read 94 shell scripting 27 33 cut 93 Shell Programming 32 34 service 88 Others 33 35 date 82 system information 28 36 sudo 81 users and groups 13 37 iptables 75 network 4 38 history 67 basic shell 14 39 hostname 65 multi-user environments 23 40 test 64 Others 29 41 nohup 64 process management 21 42 apt-get 62 Others 12 43 unset 58 shell scripting 14 44 tee 49 Others 1 45 clear 49 basic shell 22 46 ln 46 Others 31 47 wc 45 file examination 29 48 perl 40 programming 20 49 uname 39 system information 27 50 whoami 36 users and groups 29 51 niutil 36 Others 6 52 find 35 searching and sorting 5 53 chown 33 file permissions 19 54 pwd 32 directories 29 55 declare 32 Others 4 56 sort 29 searching and sorting 17 57 sh 29 Shell programming 16 58 netstat 29 network 16 59 kill 28 process management 16 60 tail 25 file examination 9 61 mktemp 24 filesystem 7 62 md5sum 23 Others 10 63 local 22 Others 5 64 export 21 shell scripting 14 65 tp 20 Others 2 66 pidof 20 Others 10 67 oudsbvodbvodbvsdbvoubdovbdbvdbvpbdsvpdsvb 20 Others 5 68 mail 19 network 16 69 id 19 Others 15 70 fetch 19 Others 4 71 unlock 18 Others 1 72 ls 18 directories 10 73 lsof 16 filesystem 4 74 crontab 16 miscellaneous 7 75 return 15 Others 3 76 basename 15 filesystem 8 77 sshpass 14 Others 6 78 fuser 14 Others 4 79 errx 14 Others 1 80 lynx 13 network 1 81 GET 13 Others 1 82 uniq 12 searching and sorting 12 83 nireport 12 Others 3 84 free 12 Others 2 85 tr 11 Text processing 5 86 XXXXXXXX 10 Others 6 87 which 9 searching and sorting 5 88 osascript 9 Others 3 89 ifconfig 9 network 6 90 gzip 9 compression 5 91 stat 8 Others 4 92 gcc 8 Others 5 93 dobin 8 Others 1 94 cc 8 Others 4 95 yum 7 Others 3 96 python 7 Others 5 97 ping 7 network 3 98 let 7 shell scripting 5 99 git 7 build management 5 100 zmap 6 Others 6 101 usermod 6 Others 6 102 realpath 6 Others 6 103 nidump 6 Others 3 104 nice 6 Others 3 105 md 6 Others 1 106 hdiutil 6 Others 3 107 dscl 6 Others 3 108 dirname 6 filesystem 5 109 chflags 6 Others 3 110 break 6 Others 4 111 useradd 5 Others 4 112 udpflood 5 Others 1 113 udpdata 5 Others 1 114 twinge 5 Others 1 115 true 5 Others 4 116 trash 5 Others 1 117 ton 5 Others 1 118 targa 5 Others 1 119 sysctl 5 Others 5 120 stuffit 5 Others 1 121 sexy 5 Others 1 122 pong 5 Others 1 123 pepsi 5 Others 1 124 overdrop 5 Others 1 125 opentear 5 Others 1 126 laser 5 Others 1 127 header 5 Others 2 128 gin 5 Others 1 129 exec 5 Others 4 130 echok 5 Others 1 131 coke 5 Others 1 132 apt-key 5 Others 3 133 ADMdnsfuckr 5 Others 1 134 usage 4 Others 2 135 unzip 4 compression 3 136 trap 4 process management 4 137 teardrop 4 Others 1 138 synk 4 Others 1 139 synhose 4 Others 1 140 synful 4 Others 1 141 syndrop 4 Others 1 142 sw_vers 4 Others 4 143 stream 4 Others 1 144 stealth 4 Others 1 145 sprite 4 Others 1 146 spiffit 4 Others 1 147 spender 4 Others 1 148 smack 4 Others 1 149 set 4 shell scripting 2 150 rwhokill 4 Others 1 151 ruc 4 Others 1 152 rpk 4 Others 1 153 raped 4 Others 1 154 orgasm 4 Others 1 155 octopus 4 Others 1 156 nproc 4 Others 4 157 newtear 4 Others 1 158 mutilate 4 Others 1 159 kills 4 Others 4 160 hestra 4 Others 1 161 hell 4 Others 1 162 gunzip 4 compression 4 163 galt_gin 4 Others 1 164 fold 4 Others 4 165 flatline 4 Others 1 166 duy 4 Others 1 167 conseal 4 Others 1 168 command 4 Others 1 169 cocksuck 4 Others 1 170 bncex 4 Others 1 171 biffit 4 Others 1 172 beer 4 Others 1 173 winnuke 3 Others 1 174 winfreez 3 Others 1 175 uptime 3 Others 3 176 test_password 3 Others 3 177 su 3 users and groups 3 178 strings 3 Others 3 179 ssping 3 Others 1 180 request_password 3 Others 3 181 pirchslap 3 Others 1 182 pimp 3 Others 1 183 passwd 3 users and groups 2 184 output 3 Others 3 185 oshare 3 Others 1 186 onetwothreefour 3 Others 1 187 nvram 3 Others 3 188 ntdns 3 Others 1 189 nicl 3 Others 3 190 nfo 3 Others 3 191 nestea 3 Others 1 192 latierra 3 Others 1 193 land 3 Others 1 194 kox 3 Others 1 195 killwin 3 Others 1 196 killinetd 3 Others 1 197 jot 3 Others 3 198 jolt 3 Others 1 199 jaypee 3 Others 1 200 ircdkill 3 Others 1 201 gewse 3 Others 1 202 getopts 3 Others 3 203 getconf 3 Others 3 204 ftp 3 network 3 205 foqerc 3 Others 1 206 flushot 3 Others 1 207 env 3 Others 1 208 enable_ssh 3 Others 3 209 dropcheck 3 Others 2 210 download 3 Others 1 211 doslinux 3 Others 1 212 dosfrontpage 3 Others 1 213 disktool 3 Others 3 214 dig 3 Others 3 215 df 3 Others 1 216 defaults 3 Others 3 217 bonk 3 Others 1 218 bloop 3 Others 1 219 ascendfoo 3 Others 1 220 arp 3 network 3 221 accton 3 Others 3 222 yes 2 Others 2 223 wingatecrash 2 Others 1 224 unalias 2 basic shell 2 225 umask 2 file permissions 2 226 tesoiis 2 Others 1 227 softwareupdate 2 Others 2 228 simping 2 Others 1 229 reboot 2 Others 2 230 rcon 2 Others 1 231 rape 2 Others 1 232 php 2 programming 2 233 nc 2 network 2 234 mmsudos 2 Others 1 235 misfrag 2 Others 1 236 mailer 2 Others 1 237 linuxicmp 2 Others 1 238 kod 2 Others 1 239 koc 2 Others 1 240 iptables-save 2 network 1 241 iptables-restore 2 network 2 242 inetddos 2 Others 1 243 hanson 2 Others 1 244 fawx 2 Others 1 245 egrep 2 regular expressions 2 246 du 2 file examination 1 247 dstat 2 Others 1 248 dpkg 2 Others 2 249 downloadIfNeed 2 Others 1 250 dosprox 2 Others 1 251 comatose 2 Others 1 252 chpasswd 2 Others 2 253 chkconfig 2 Others 1 254 cdrecord 2 Others 2 255 ca 2 Others 2 256 boink 2 Others 1 257 bash 2 Others 2 258 \\xef\\xbb\\xbf#!/bin/bash 2 Others 2 259 WinAttack 2 Others 1 260 NoPorts 2 Others 1 261 LinuxAttack 2 Others 1 262 FullAttack 2 Others 1 263 BSDAttack 2 Others 1 264 wtmp 1 Others 1 265 who 1 Others 1 266 wall 1 multi-user environments 1 267 utmp 1 Others 1 268 system_profiler 1 Others 1 269 synfulnone 1 Others 1 270 syndropnone 1 Others 1 271 srcipgen 1 Others 1 272 socklist 1 Others 1 273 screen 1 Others 1 274 run_proc 1 Others 1 275 readonly 1 Others 1 276 readlink 1 Others 1 277 portchg 1 Others 1 278 optionlist 1 Others 1 279 open 1 Others 1 280 notfound 1 Others 1 281 nmapcheck 1 Others 1 282 nmap 1 Others 1 283 mkfifo 1 Others 1 284 make 1 build management 1 285 main 1 Others 1 286 lspci 1 Others 1 287 logout 1 basic shell 1 288 locktcp 1 Others 1 289 lastlog 1 Others 1 290 kkill 1 Others 1 291 kdialog 1 Others 1 292 judge 1 Others 1 293 isPnscanOn 1 Others 1 294 ipcalc 1 Others 1 295 imagemount 1 Others 1 296 httpd 1 Others 1 297 file 1 Others 1 298 enable 1 Others 1 299 downloadyam 1 Others 1 300 dickdripchk 1 Others 1 301 create_module 1 Others 1 302 continue 1 Others 1 303 cleaner 1 Others 1 304 chgrp 1 file permissions 1 305 check_proc 1 Others 1 306 busyboxchmod 1 Others 1 307 binds 1 Others 1 308 Set 1 Others 1 309 DONTSTOPPER 1 Others 1 310 AppleFileServer 1 Others 1 Sort By Number of Files No. Linux Command Frequency Classification Number of Files 1 chmod 37389 file permissions 3024 2 cd 178691 directories 2884 3 wget 27037 network 2191 4 rm 26805 file operations 2146 5 cat 11723 file examination 989 6 cp 1244 file operations 827 7 ulimit 797 miscellaneous 796 8 tftp 9943 network 777 9 curl 4657 network 416 10 echo 4447 shell scripting 169 11 sleep 330 miscellaneous 120 12 exit 142 basic shell 102 13 grep 717 searching and sorting 87 14 mkdir 185 directories 65 15 busybox 1011 Others 49 16 killall 412 process management 44 17 awk 221 Text processing 44 18 mv 652 file operations 43 19 tar 130 compression 40 20 service 88 Others 33 21 cut 93 Shell Programming 32 22 touch 445 file operations 31 23 ln 46 Others 31 24 whoami 36 users and groups 29 25 wc 45 file examination 29 26 test 64 Others 29 27 pwd 32 directories 29 28 date 82 system information 28 29 uname 39 system information 27 30 read 94 shell scripting 27 31 head 100 file examination 27 32 ftpget 320 Others 26 33 ps 106 process management 24 34 hostname 65 multi-user environments 23 35 clear 49 basic shell 22 36 nohup 64 process management 21 37 expr 124 Others 21 38 chattr 994 Others 21 39 sed 126 regular expressions 20 40 perl 40 programming 20 41 chown 33 file permissions 19 42 sort 29 searching and sorting 17 43 sh 29 Shell programming 16 44 netstat 29 network 16 45 mail 19 network 16 46 kill 28 process management 16 47 id 19 Others 15 48 unset 58 shell scripting 14 49 history 67 basic shell 14 50 export 21 shell scripting 14 51 sudo 81 users and groups 13 52 uniq 12 searching and sorting 12 53 apt-get 62 Others 12 54 pkill 229 process management 11 55 pidof 20 Others 10 56 md5sum 23 Others 10 57 ls 18 directories 10 58 tail 25 file examination 9 59 xargs 94 searching and sorting 8 60 basename 15 filesystem 8 61 printf 133 shell scripting 7 62 mktemp 24 filesystem 7 63 crontab 16 miscellaneous 7 64 zmap 6 Others 6 65 usermod 6 Others 6 66 sshpass 14 Others 6 67 realpath 6 Others 6 68 niutil 36 Others 6 69 ifconfig 9 network 6 70 XXXXXXXX 10 Others 6 71 which 9 searching and sorting 5 72 tr 11 Text processing 5 73 sysctl 5 Others 5 74 python 7 Others 5 75 oudsbvodbvodbvsdbvoubdovbdbvdbvpbdsvpdsvb 20 Others 5 76 local 22 Others 5 77 let 7 shell scripting 5 78 gzip 9 compression 5 79 git 7 build management 5 80 gcc 8 Others 5 81 find 35 searching and sorting 5 82 dirname 6 filesystem 5 83 useradd 5 Others 4 84 true 5 Others 4 85 trap 4 process management 4 86 sw_vers 4 Others 4 87 stat 8 Others 4 88 nproc 4 Others 4 89 lsof 16 filesystem 4 90 kills 4 Others 4 91 iptables 75 network 4 92 gunzip 4 compression 4 93 fuser 14 Others 4 94 fold 4 Others 4 95 fetch 19 Others 4 96 exec 5 Others 4 97 declare 32 Others 4 98 cc 8 Others 4 99 break 6 Others 4 100 yum 7 Others 3 101 uptime 3 Others 3 102 unzip 4 compression 3 103 test_password 3 Others 3 104 su 3 users and groups 3 105 strings 3 Others 3 106 return 15 Others 3 107 request_password 3 Others 3 108 ping 7 network 3 109 output 3 Others 3 110 osascript 9 Others 3 111 nvram 3 Others 3 112 nireport 12 Others 3 113 nidump 6 Others 3 114 nicl 3 Others 3 115 nice 6 Others 3 116 nfo 3 Others 3 117 jot 3 Others 3 118 hdiutil 6 Others 3 119 getopts 3 Others 3 120 getconf 3 Others 3 121 ftp 3 network 3 122 enable_ssh 3 Others 3 123 dscl 6 Others 3 124 disktool 3 Others 3 125 dig 3 Others 3 126 defaults 3 Others 3 127 chflags 6 Others 3 128 arp 3 network 3 129 apt-key 5 Others 3 130 accton 3 Others 3 131 yes 2 Others 2 132 usage 4 Others 2 133 unalias 2 basic shell 2 134 umask 2 file permissions 2 135 tp 20 Others 2 136 softwareupdate 2 Others 2 137 set 4 shell scripting 2 138 reboot 2 Others 2 139 php 2 programming 2 140 passwd 3 users and groups 2 141 nc 2 network 2 142 iptables-restore 2 network 2 143 header 5 Others 2 144 free 12 Others 2 145 egrep 2 regular expressions 2 146 dropcheck 3 Others 2 147 dpkg 2 Others 2 148 chpasswd 2 Others 2 149 cdrecord 2 Others 2 150 ca 2 Others 2 151 bash 2 Others 2 152 \\xef\\xbb\\xbf#!/bin/bash 2 Others 2 153 wtmp 1 Others 1 154 winnuke 3 Others 1 155 wingatecrash 2 Others 1 156 winfreez 3 Others 1 157 who 1 Others 1 158 wall 1 multi-user environments 1 159 utmp 1 Others 1 160 unlock 18 Others 1 161 udpflood 5 Others 1 162 udpdata 5 Others 1 163 twinge 5 Others 1 164 trash 5 Others 1 165 ton 5 Others 1 166 tesoiis 2 Others 1 167 tee 49 Others 1 168 teardrop 4 Others 1 169 targa 5 Others 1 170 system_profiler 1 Others 1 171 synk 4 Others 1 172 synhose 4 Others 1 173 synfulnone 1 Others 1 174 synful 4 Others 1 175 syndropnone 1 Others 1 176 syndrop 4 Others 1 177 stuffit 5 Others 1 178 stream 4 Others 1 179 stealth 4 Others 1 180 ssping 3 Others 1 181 srcipgen 1 Others 1 182 sprite 4 Others 1 183 spiffit 4 Others 1 184 spender 4 Others 1 185 socklist 1 Others 1 186 smack 4 Others 1 187 simping 2 Others 1 188 sexy 5 Others 1 189 screen 1 Others 1 190 rwhokill 4 Others 1 191 run_proc 1 Others 1 192 ruc 4 Others 1 193 rpk 4 Others 1 194 readonly 1 Others 1 195 readlink 1 Others 1 196 rcon 2 Others 1 197 raped 4 Others 1 198 rape 2 Others 1 199 portchg 1 Others 1 200 pong 5 Others 1 201 pirchslap 3 Others 1 202 pingtest 108 Others 1 203 pimp 3 Others 1 204 pepsi 5 Others 1 205 overdrop 5 Others 1 206 oshare 3 Others 1 207 orgasm 4 Others 1 208 optionlist 1 Others 1 209 opentear 5 Others 1 210 open 1 Others 1 211 onetwothreefour 3 Others 1 212 octopus 4 Others 1 213 ntdns 3 Others 1 214 notfound 1 Others 1 215 nmapcheck 1 Others 1 216 nmap 1 Others 1 217 newtear 4 Others 1 218 nestea 3 Others 1 219 mutilate 4 Others 1 220 mmsudos 2 Others 1 221 mkfifo 1 Others 1 222 misfrag 2 Others 1 223 md 6 Others 1 224 make 1 build management 1 225 main 1 Others 1 226 mailer 2 Others 1 227 lynx 13 network 1 228 lspci 1 Others 1 229 lp 107 Others 1 230 logout 1 basic shell 1 231 locktcp 1 Others 1 232 linuxicmp 2 Others 1 233 latierra 3 Others 1 234 lastlog 1 Others 1 235 laser 5 Others 1 236 land 3 Others 1 237 kox 3 Others 1 238 kod 2 Others 1 239 koc 2 Others 1 240 kkill 1 Others 1 241 killwin 3 Others 1 242 killinetd 3 Others 1 243 kdialog 1 Others 1 244 judge 1 Others 1 245 jolt 3 Others 1 246 jaypee 3 Others 1 247 isPnscanOn 1 Others 1 248 ircdkill 3 Others 1 249 iptables-save 2 network 1 250 ipcalc 1 Others 1 251 inetddos 2 Others 1 252 imagemount 1 Others 1 253 httpd 1 Others 1 254 hestra 4 Others 1 255 hell 4 Others 1 256 hanson 2 Others 1 257 gin 5 Others 1 258 gewse 3 Others 1 259 galt_gin 4 Others 1 260 foqerc 3 Others 1 261 flushot 3 Others 1 262 flatline 4 Others 1 263 file 1 Others 1 264 fawx 2 Others 1 265 errx 14 Others 1 266 env 3 Others 1 267 enable 1 Others 1 268 echok 5 Others 1 269 duy 4 Others 1 270 du 2 file examination 1 271 dstat 2 Others 1 272 downloadyam 1 Others 1 273 downloadIfNeed 2 Others 1 274 download 3 Others 1 275 dosprox 2 Others 1 276 doslinux 3 Others 1 277 dosfrontpage 3 Others 1 278 dobin 8 Others 1 279 dickdripchk 1 Others 1 280 df 3 Others 1 281 create_module 1 Others 1 282 continue 1 Others 1 283 conseal 4 Others 1 284 command 4 Others 1 285 comatose 2 Others 1 286 coke 5 Others 1 287 cocksuck 4 Others 1 288 cleaner 1 Others 1 289 chkconfig 2 Others 1 290 chgrp 1 file permissions 1 291 check_proc 1 Others 1 292 busyboxchmod 1 Others 1 293 bonk 3 Others 1 294 boink 2 Others 1 295 bncex 4 Others 1 296 bloop 3 Others 1 297 binds 1 Others 1 298 biffit 4 Others 1 299 beer 4 Others 1 300 ascendfoo 3 Others 1 301 WinAttack 2 Others 1 302 Set 1 Others 1 303 NoPorts 2 Others 1 304 LinuxAttack 2 Others 1 305 GET 13 Others 1 306 FullAttack 2 Others 1 307 DONTSTOPPER 1 Others 1 308 BSDAttack 2 Others 1 309 AppleFileServer 1 Others 1 310 ADMdnsfuckr 5 Others 1 How many commands classification used in our project No. Classification Commands 1 network wget, tftp, curl, netstat, mail, lynx, ping, ifconfig, iptables, ftp, arp, nc, 2 file examination cat, head, wc, tail, du, 3 build management make, git, 4 Shell Programming cut, 5 multi-user environments hostname, wall, 6 searching and sorting grep, xargs, find, sort, which, uniq, 7 directories cd, mkdir, pwd, ls, 8 filesystem mktemp, lsof, basename, dirname, 9 Shell programming sh, 10 process management killall, pkill, ps, nohup, kill, trap, 11 regular expressions sed, egrep, 12 programming perl, php, 13 compression tar, gzip, gunzip, 14 file permissions chmod, chown, umask, chgrp, 15 basic shell exit, history, clear, unalias, 16 miscellaneous ulimit, sleep, crontab, 17 Others chattr, busybox, ftpget, expr, pingtest, lp, test, ln, niutil, declare, service, md5sum, local, tp, pidof, unlock, oudsbvodbvodbvsdbvoubdovbdbvdbvpbdsvpdsvb, return, sshpass, errx, fetch, apt-get, GET, nireport, id, XXXXXXXX, osascript, stat, gcc, dobin, cc, zmap, usermod, realpath, nidump, nice, md, hdiutil, dscl, chflags, break, udpflood, udpdata, twinge, true, trash, ton, targa, stuffit, sexy, pong, pepsi, overdrop, opentear, laser, gin, echok, coke, ADMdnsfuckr, usage, teardrop, synk, synhose, synful, syndrop, sw_vers, stream, stealth, sprite, spiffit, spender, smack, rwhokill, ruc, rpk, raped, orgasm, octopus, nproc, newtear, mutilate, hestra, hell, galt_gin, flatline, duy, downloadyam, conseal, command, cocksuck, bncex, biffit, beer, winnuke, winfreez, sysctl, strings, ssping, request_password, python, pirchslap, pimp, oshare, onetwothreefour, nvram, ntdns, nicl, nfo, nestea, latierra, land, kox, killwin, killinetd, jot, jolt, jaypee, ircdkill, gewse, getopts, getconf, foqerc, fold, flushot, dropcheck, download, doslinux, dosfrontpage, disktool, dig, defaults, bonk, bloop, ascendfoo, accton, yum, wingatecrash, useradd, tesoiis, softwareupdate, simping, rcon, rape, mmsudos, misfrag, mailer, linuxicmp, kod, koc, inetddos, hanson, fawx, downloadIfNeed, dosprox, comatose, chkconfig, cdrecord, ca, boink, WinAttack, NoPorts, LinuxAttack, FullAttack, BSDAttack, wtmp, who, utmp, uptime, system_profiler, synfulnone, syndropnone, srcipgen, socklist, scanner, run_proc, readonly, readlink, portchg, optionlist, open, nmapcheck, nmap, mkfifo, main, lspci, locktcp, lastlog, kkill, kdialog, judge, ipcalc, imagemount, httpd, header, file, dickdripchk, create_module, continue, cleaner, check_proc, busyboxchmod, binds, bash, \\xef\\xbb\\xbf#!/bin/bash, Set, DONTSTOPPER, AppleFileServer, 18 file operations rm, cp, mv, touch, 19 system information date, uname, 20 Text processing awk, tr, 21 users and groups sudo, whoami, su, passwd, 22 shell scripting echo, unset, printf, read, export, set, let, By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-01-04-Development-Test.html":{"url":"virus_analyze/2019-01-04-Development-Test.html","title":"Error file name","keywords":"","body":"make_graph() exit error(FunctionNode) These scripts include the FunctionNode: 13c0bfb35f5631c58663c18eae79f5cf 20cc4ccf4f41ba3a35cc85f7bcfd80d9 2e95a1ac4eda547452f90bed1cc58fbd 40adef002d4895fb11354ad1c9f155d0 422455b9a45f1e2dd9eb92217ccd8b00 4606de11723bf87303b490566619c63c 485d65b03ab0e2facd67df6dc5b7ac92 56652c8d8f923a6776427e3854e391bc 6599c50a17c742e23e6a0ba3696b6bc7 6ad599a79d712fbb2afb52f68b2d7935 b577bf51c2cd7760f795906377add94a cd6fbf3df58ecfbdd09ceaf0664c1a59 d5ab2beabe973a7718d01eef27b381e1 e8865f93b056ce16c1abdb4771b5883a Error: Unknown kind:FunctionNode Process Updated: Update error: 02/04/2019 By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-02-05-Development-BashGraph-Todo.html":{"url":"virus_analyze/2019-02-05-Development-BashGraph-Todo.html","title":"BashGraph TODO List","keywords":"","body":"BashGraph Todo List More Node Types The following node types need to be handled. FunctionNode CaseNode By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-02-10-Application-Bugs.html":{"url":"virus_analyze/2019-02-10-Application-Bugs.html","title":"Application TODO","keywords":"","body":"Some Bugs in the Application Dot file Fixed: VirusShare_001804c2ee9a44b3e8e8d0e73d516f7e.dot VirusShare_3155860c4fcee4b076c6284f9951dca0.dot Error: [label=\" path=/Library/Internet Plug-Ins\"]; [label=\" \\[ $exist == ]\"]; [label=\" echo * \\\"$path/plugins.settings\\\">/dev/null 2>&1 \"]; VirusShare_3b3b7a7e51d60a09e0c0e54f48b2b2db.dot Error: H4sICH7bDFkAA21pbmVyZADE/Q98VNd95w/fGY2kkTS2BxsntKFhBAIEKImISavukmSwSUoakgwY\" \\[ true \\]\"] VirusShare_6d8c25db72ec93f9cb308dbb99b767e0.dot VirusShare_742f247c9ff393f8daf2e1609f0d9506.dot VirusShare_765198ea7c5629637bae889e4b2fd7e9.dot VirusShare_81d98d94c3ff744a6087961f41b096da.dot VirusShare_87934e6519091f075815d90ef8b17733.dot VirusShare_ad7b18dadb98ddb8698fd31e34a51e10.dot VirusShare_c2474337dd6546c348d51083af731262.dot Function Node The error_tag for function node is not displayed in the application. Check it, the graph part not return the functionnodo property information. Don't print the information for the functionNode and Casenode. Change it in the graph module. Busybox The busybox command is showed like the Unkowen command. This is not correct. We need to change it to showed like busybox rm or other command. sodu Urgency (How many companies think this file is a malware file.) Add the urgency field from the virustotal website. Finished [x] Import the json file to database. We need to import the json file to database, then we can use this to do some analyze [x] Make the database can share with other people. Change the path save file in the json files, then we can share the config file for each laptop. [x] Add the normal dataset and malware dataset in the application. By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "},"virus_analyze/2019-05-06-Weekly-Report-Guoze.html":{"url":"virus_analyze/2019-05-06-Weekly-Report-Guoze.html","title":"Weekly Report Guoze","keywords":"","body":"Weekly Work Record Week Work [x] Deal with the command classify. Generate a table which sort by the numbers of files. The link: Sort by number of files [x] Merge the other 2470 bash scripts into our malware dataset. (These bash scripts are come from the malware github repo.) Github Repo There are only 451 new bash scripts which we can add into our malware dataset. And, the new files link: Github Repo [x] Build some tool to understand the bash script. (Extencd)--- Not Hard code, use some design config files. We extracted some file which we can use to train our model. And use some normal scrips to test the model. [x] Get the script result from the VirusShare for malware dataset and normal dataset. (Normal Dataset) We finished the malware dataset. But, we also need one more week to finish the download for the normal dataset. [x] Find other system call to monitor the parameter in the command. -- Can we use some other approacth to catch the system call. Next week Plan [ ] Find some way to detect the build-in command system call sequences (To make sure the Bash how to implement cd command in the Linux system.) [ ] Do more research about the ftrace, to make sure how many brand use this framework, how many IoT things use this. [ ] Write some documents in our project. Some links about the linux build-in commands: http://web.archive.org/web/20090515201659/http://www.cs.ucr.edu/~brett/cs153_w02/syscall.html Some Link: Github Repo about the ftrace Frace How to hook the linux system call Hook Example How to config the Frace in the openwrt Other work Record Last week [x] Write script to get the malware scripts in from a new malware scripts repo. [x] Change our Linux commands dataset. (Include more Linux commands in our dataset.) 03/18/2019 - 03/22/2019 [x] Collect more normal bash scripts from Github. Target Repo We focus on the Github repo which get the starts more than 50. There are 244,162 repository results. We try to write a GitHub spiders clone these repositories and extract bash scripts from these repositories. (Keep Record the source for each bash scripts.) I have collected almost 9.341 normal bash scripts from 1987 repos on Github. Test these bash scripts by the bash script parser module. Total normal scripts: 9,341 Passed(Parsed): 5,914 (Failed: 3,427) [x] Fix some bugs in the application. Application Todo List We need to use the normal bash script to generate the normal node file and graph files. After then, we use this information to build our normal bash scripts dataset.) Next Week Todo [ ] Collect more normal bash scripts from Github. Target Repo [ ] Test the Normal bash scripts by our applictaion. [ ] Choose 100 malware bash scripts in our dataset. We change some small part in these scripts to make sure we can run these script and get the system call sequences. 03/11/2019 - 03/15/2019 [x] Collected the normal Linux bash scripts from the SHELLdorado website. Private Repo Introduce, Dataset Link Download files from this website. Write a python script to extract bash script file from the downloaded files I have collected almost 800 normal bash scripts from Github or some book resource. Test these bash scripts by the bash script parser module. Total normal scripts: 762 All Passed: 335 Failed: 427 Parser failed: 286 Generate Graph Filed: 141 (Function: 56, if: 93, while: 67, case: 96, for: 33) [x] Built the normal bash scripts dataset. Add the dataset to our application. [x] Fix some bugs in the application. Application Todo List We need to use the normal bash script to generate the normal node file and graph files. After then, we use this information to build our normal bash scripts dataset.) Next Week Todo [ ] Collect more normal bash scripts from Github. Target Repo We focus on the Github repo which get the starts more than 50. There are 244,162 repository results. We try to clone these repo and extract bash scripts from these repo. Record the source for each bash scripts. 02/04/2019 - 02/08/2019 This Week TODO List [ ] Build the bash parser module to the main application(---Move to next week) [ ] Integrate Fei Ding's part in the application (Maybe---Waiting for Hongda rebuild it) [x] Generate 1.000 dot file as the Feiding's project input (Generate 1750 dot files for test) Remove the binary file name in the bash scripts files. Deal with the network commands for wget, ftp, tftp, curl using a different style. (Move the network commands to small parts.) [x] Collect the feedback and change the script data module about remove the Download Binary file name. (Add the assignment) Deal with the unknown commands about the assignment Add the property field and search function in the table.(Change the database). We can use it to analyze the bash scripts in our dataset. Add the export function in the application, we can use it to export the search result in our application. Reduce the Linux commands which used in all the bash scripts by removing the binary file name. Add the code to record commands ===>> bash scripts map. [x] Monitor development: Map the commands in the bash scripts to the IoT driver system call. (Partner: Lavaniyaa. ) Using a strace tool to trace the system call in the Raspbian OS (Finish About ten Linux commands). Each Linux commands we need to write about ten examples to test and record. Example Monitor the system by add module in the Linux kernel(Lavaniyaa). Some links: Raspbian kernel source code, ktrace. Building and Configuring the kernel. Link1, Link2 [X] Write the document to introduce the application framework and how to use the application. Document Next Week Todo Collect the 76 Linux Commands system call in the Raspberry Pi. (Raspbian OS) Discuss with Hongda and Lavaniyaa about how to use the command and system call data to get the mapping. Application Add the code to deal with the if Node or while Node. [Done] Build the bash parser module to the main application. Fix a bug about the \"All commans in the code\" [Done] Update the command class form and add a link in the website[Done] Last week 02/11/2019 - 02/15/2019 Collect the 79 Linux Commands system call in the Raspberry Pi. (Raspbian OS) (Done 50%, I have collected almost 40 Linux Commands system call logs in Raspbian OS.) Documents Link Application (Fixed some bugs.): Add the code to deal with the if Node or while Node. (100% Done. We have update the code to Github master branch.) Fix a bug about the \"All commands in the code.\". (100% Done.) 02/18/2019 - 02/22/2019 Discuss with Hongda and Lavaniyaa about how to use the command and system call data to get the mapping. (100% Done.) We changed some work part in the team. Now, there are two parts we need to focus. Build the normal bash script dataset. In addition, Compare with the normal bash script graph with the malware bash script graph. (Commands or system call sequences.- We need to discuss more about this.) Map the commands to the system call. (Lavaniyaa) Collect the 79 Linux Commands system call in the Raspberry Pi. (Raspbian OS) (The next work move to Lavaniyaa. The Code Link) Application: Build the bash parser module to the main application. Next Week TODO List [ ] Collect the normal Linux bash scripts from the SHELLdorado website. (Plan: 100% Done. And the normal bash script website link: Website Link) Download files from this website. Write a python script to extract bash script file from the downloaded files. Test these bash scripts by the bash script parser module. [ ] Build the normal bash scripts dataset. (Plan: 50% Done. We need to use the normal bash script to generate the normal node file and graph files. After then, we use this information to build our normal bash scripts dataset.) [ ] Write a python script to split the bash scripts files which have the cd pattern in the code. (Plan: 100% Done. We want to analyze the different line in these file by comparing each line.) Example Script Some websites about the nomal bash scripts: UNIX shell scripting resource [x] Linux shell scripts [x] http://www.comp.eonworks.com/scripts/scripts.html [x] http://cgd.sdf-eu.org/a_scripts.html [x] https://www.cs.nmsu.edu/~tomohara/useful-scripts/ [x] https://github.com/pixelb/scripts - set of utilities written in shell scripts. 01/21/2019 - 01/25/2019 Optimized the regular expression to remove the commands which are not the Linux commands in our dataset. (Give a result about how many Linux command used in all the bash scripts exclude the other filename or some commands which are not Linux commands.) [Linux Commands] Changed the application code to help Fei Ding to merge the binary commands name, and use the same names to instead of all the binary commands to reduce the graph node size. Built the bach command classification module in the application. Classification 01/28/2019 - 02/01/2019 Build the script data module which can filter the download file name and remove this information in our graph to reduce complexity for the control flow graph. Work with Hongda API Document Commands Classify: Linux Command, Binary FIle, Unknown Commands, Building Commands(No System Call) Questions Move the network commands to different small parts. How to classify the Linux Commands and the Building Commands (Linux Commands Line Introduce) Check whether there are some unknown commands in our bash scripts. Generate 100 dot file as the Feiding's project input to test. Build development documents share website. NSS Lab Development Documents Relative Link Linux Commands Line Introduce Next Week TODO List [ ] Monitor Development: Map the commands in the bash scripts to the IoT driver system call. (Partner: Lavaniyaa) Application Build the bash parser module to the main application Integrate Fei Ding's part in the application (Maybe) Generate 1.000 dot file as the Feiding's project input Collect the feedback and change the script data module about remove the Download Binary file name. ](# Weekly Work Record 02/11/2019 - 02/15/2019 Collect the 76 Linux Commands system call in the Raspberry Pi. (Raspbian OS) (Done 50%, I have collected almost 40 Linux Commands system call logs in Raspbian OS.) Application: Add the code to deal with the if Node or while Node. (100% Done. We have updated the code to GitHub master branch.) Fix a bug about the \"All commands in the code.\". (100% Done.) 02/18/2019 - 02/22/2019 Discuss with Hongda and Lavaniyaa about how to use the command and system call data to get the mapping. (100% Done.) Change some work partly in the team. Now, there are two parts we need to focus on. Build the normal bash script dataset. In addition, Compare with the normal bash script graph with the malware bash script graph. (Commands or system call sequences.) Map the commands to the system call. Collect the 76 Linux Commands system call in the Raspberry Pi. (Raspbian OS) (The next work move to Lavaniyaa. The Code Link) Application: Build the bash parser module to the main application. Next Week TODO List [ ] Collect the normal Linux bash scripts from the SHELLdorado website. (Plan: 100% Done. And the normal bash script website link: Website Link) download files from this website. Write a python script to extract bash script file from the downloaded files. Test these bash scripts by the bash script parser module. [ ] Build the normal bash scripts dataset. (Plan: 50% Done. We need to use the normal bash script to generate the normal node file and graph files. After then, we use this information to build our normal bash scripts dataset.) [ ] Write a python script to split the bash scripts files which have the cd pattern in the code. (Plan: 100% Done. We want to analyze the different line in these file by comparing each line.) Information about the nomal bash scripts: UNIX shell scripting resource Linux shell scripts http://www.comp.eonworks.com/scripts/scripts.html http://cgd.sdf-eu.org/a_scripts.html https://www.cs.nmsu.edu/~tomohara/useful-scripts/ https://github.com/pixelb/scripts - set of utilities written in shell scripts. Last week 02/04/2019 - 02/08/2019 This Week TODO List [ ] Build the bash parser module to the main application(---Move to next week) [ ] Integrate Fei Ding's part in the application (Maybe---Waiting for Hongda rebuild it) [x] Generate 1.000 dot file as the Feiding's project input (Generate 1750 dot files for test) Remove the binary file name in the bash scripts files. Deal with the network commands for wget, ftp, tftp, curl using a different style. (Move the network commands to small parts.) [x] Collect the feedback and change the script data module about remove the Download Binary file name. (Add the assignment) Deal with the unknown commands about the assignment Add the property field and search function in the table. (Change the database). We can use it to analyze the bash scripts in our dataset. Add the export function in the application, we can use it to export the search result in our application. Reduce the Linux commands which used in all the bash scripts by removing the binary file name. Add the code to record commands ===>> bash scripts map. [x] Monitor development: Map the commands in the bash scripts to the IoT driver system call. (Partner: Lavaniyaa. ) Using a strace tool to trace the system call in the Raspbian OS (Finish About ten Linux commands). Each Linux commands we need to write about ten examples to test and record. Example Monitor the system by add module in the Linux kernel(Lavaniyaa). Some links: Raspbian kernel source code, ktrace. Building and Configuring the kernel. Link1, Link2 [X] Write the document to introduce the application framework and how to use the application. Document Next Week Todo Collect the 76 Linux Commands system call in the Raspberry Pi. (Raspbian OS) Discuss with Hongda and Lavaniyaa about how to use the command and system call data to get the mapping. Application Add the code to deal with the if Node or while Node. [Done] Build the bash parser module to the main application. Fix a bug about the \"All commans in the code\" [Done] Update the command class form and add a link in the website[Done] Last week 01/21/2019 - 01/25/2019 Optimized the regular expression to remove the commands which are not the Linux commands in our dataset. (Give a result about how many Linux command used in all the bash scripts exclude the other filename or some commands which are not Linux commands.) [Linux Commands] Changed the application code to help Fei Ding to merge the binary commands name, and use the same names to instead of all the binary commands to reduce the graph node size. Built the bach command classification module in the application. Classification 01/28/2019 - 02/01/2019 Build the script data module which can filter the download file name and remove this information in our graph to reduce complexity for the control flow graph. Work with Hongda API Document Commands Classify: Linux Command, Binary FIle, Unknown Commands, Building Commands(No System Call) Questions Move the network commands to different small parts. How to classify the Linux Commands and the Building Commands (Linux Commands Line Introduce) Check whether there are some unknown commands in our bash scripts. Generate 100 dot file as the Feiding's project input to test. Build development documents share website. NSS Lab Development Documents Relative Link Linux Commands Line Introduce Next Week TODO List [ ] Monitor Development: Map the commands in the bash scripts to the IoT driver system call. (Partner: Lavaniyaa) Application Build the bash parser module to the main application Integrate Fei Ding's part in the application (Maybe) Generate 1.000 dot file as the Feiding's project input Collect the feedback and change the script data module about remove the Download Binary file name. )](# Weekly Work Record 02/11/2019 - 02/15/2019 Collect the 79 Linux Commands system call in the Raspberry Pi. (Raspbian OS) (Done 50%, I have collected almost 40 Linux Commands system call logs in Raspbian OS.) Documents Link Application (Fixed some bugs.): Add the code to deal with the if Node or while Node. (100% Done. We have updated the code to GitHub master branch.) Fix a bug about the \"All commands in the code.\". (100% Done.) 02/18/2019 - 02/22/2019 Discuss with Hongda and Lavaniyaa about how to use the command and system call data to get the mapping. (100% Done.) We changed some work partly in the team. Now, there are two parts we need to focus on. Build the normal bash script dataset. In addition, Compare with the normal bash script graph with the malware bash script graph. (Commands or system call sequences.- We need to discuss more this.) Map the commands to the system call. (Lavaniyaa) Collect the 76 Linux Commands system call in the Raspberry Pi. (Raspbian OS) (The next work move to Lavaniyaa. The Code Link) Application: Build the bash parser module to the main application. Next Week TODO List [ ] Collect the normal Linux bash scripts from the SHELLdorado website. (Plan: 100% Done. And the normal bash script website link: Website Link) Download files from this website. Write a python script to extract bash script file from the downloaded files. Test these bash scripts by the bash script parser module. [ ] Build the normal bash scripts dataset. (Plan: 50% Done. We need to use the normal bash script to generate the normal node file and graph files. After then, we use this information to build our normal bash scripts dataset.) [ ] Write a python script to split the bash scripts files which have the cd pattern in the code. (Plan: 100% Done. We want to analyze the different line in these file by comparing each line.) Example Script Some websites about the nomal bash scripts: UNIX shell scripting resource Linux shell scripts http://www.comp.eonworks.com/scripts/scripts.html http://cgd.sdf-eu.org/a_scripts.html https://www.cs.nmsu.edu/~tomohara/useful-scripts/ https://github.com/pixelb/scripts - set of utilities written in shell scripts. Last week 02/04/2019 - 02/08/2019 This Week TODO List [ ] Build the bash parser module to the main application(---Move to next week) [ ] Integrate Fei Ding's part in the application (Maybe---Waiting for Hongda rebuild it) [x] Generate 1.000 dot file as the Feiding's project input (Generate 1750 dot files for test) Remove the binary file name in the bash scripts files. Deal with the network commands for wget, ftp, tftp, curl using a different style. (Move the network commands to small parts.) [x] Collect the feedback and change the script data module about remove the Download Binary file name. (Add the assignment) Deal with the unknown commands about the assignment Add the property field and search function in the table. (Change the database). We can use it to analyze the bash scripts in our dataset. Add the export function in the application, we can use it to export the search result in our application. Reduce the Linux commands which used in all the bash scripts by removing the binary file name. Add the code to record commands ===>> bash scripts map. [x] Monitor development: Map the commands in the bash scripts to the IoT driver system call. (Partner: Lavaniyaa. ) Using a strace tool to trace the system call in the Raspbian OS (Finish About ten Linux commands). Each Linux commands we need to write about ten examples to test and record. Example Monitor the system by add module in the Linux kernel(Lavaniyaa). Some links: Raspbian kernel source code, ktrace. Building and Configuring the kernel. Link1, Link2 [X] Write the document to introduce the application framework and how to use the application. Document Next Week Todo Collect the 76 Linux Commands system call in the Raspberry Pi. (Raspbian OS) Discuss with Hongda and Lavaniyaa about how to use the command and system call data to get the mapping. Application Add the code to deal with the if Node or while Node. [Done] Build the bash parser module to the main application. Fix a bug about the \"All commands in the code\" [Done] Update the command class form and add a link in the website[Done] Last week 01/21/2019 - 01/25/2019 Optimized the regular expression to remove the commands which are not the Linux commands in our dataset. (Give a result about how many Linux command used in all the bash scripts exclude the other filename or some commands which are not Linux commands.) [Linux Commands] Changed the application code to help Fei Ding to merge the binary commands name, and use the same names to instead of all the binary commands to reduce the graph node size. Built the bach command classification module in the application. Classification 01/28/2019 - 02/01/2019 Build the script data module which can filter the download file name and remove this information in our graph to reduce complexity for the control flow graph. Work with Hongda API Document Commands Classify: Linux Command, Binary FIle, Unknown Commands, Building Commands(No System Call) Questions Move the network commands to different small parts. How to classify the Linux Commands and the Building Commands (Linux Commands Line Introduce) Check whether there are some unknown commands in our bash scripts. Generate 100 dot file as the Feiding's project input to test. Build development documents share website. NSS Lab Development Documents Relative Link Linux Commands Line Introduce Next Week TODO List [ ] Monitor Development: Map the commands in the bash scripts to the IoT driver system call. (Partner: Lavaniyaa) Application Build the bash parser module to the main application Integrate Fei Ding's part in the application (Maybe) Generate 1.000 dot file as the Feiding's project input Collect the feedback and change the script data module about remove the Download Binary file name. ](# Weekly Work Record 02/11/2019 - 02/15/2019 Collect the 76 Linux Commands system call in the Raspberry Pi. (Raspbian OS) (Done 50%, I have collected almost 40 Linux Commands system call logs in Raspbian OS.) Application: Add the code to deal with the if Node or while Node. (100% Done. We have updated the code to GitHub master branch.) Fix a bug about the \"All commands in the code.\". (100% Done.) 02/18/2019 - 02/22/2019 Discuss with Hongda and Lavaniyaa about how to use the command and system call data to get the mapping. (100% Done.) Change some work partly on the team. Now, there are two parts we need to focus on. Build the normal bash script dataset. In addition, Compare with the normal bash script graph with the malware bash script graph. (Commands or system call sequences.) Map the commands to the system call. Collect the 76 Linux Commands system call in the Raspberry Pi. (Raspbian OS) (The next work move to Lavaniyaa. The Code Link) Application: Build the bash parser module to the main application. Next Week TODO List [ ] Collect the normal Linux bash scripts from the SHELLdorado website. (Plan: 100% Done. And the normal bash script website link: Website Link) download files from this website. Write a python script to extract bash script file from the downloaded files. Test these bash scripts by the bash script parser module. [ ] Build the normal bash scripts dataset. (Plan: 50% Done. We need to use the normal bash script to generate the normal node file and graph files. After then, we use this information to build our normal bash scripts dataset.) [ ] Write a python script to split the bash scripts files which have the cd pattern in the code. (Plan: 100% Done. We want to analyze the different line in these file by comparing each line.) Information about the nomal bash scripts: UNIX shell scripting resource Linux shell scripts http://www.comp.eonworks.com/scripts/scripts.html http://cgd.sdf-eu.org/a_scripts.html https://www.cs.nmsu.edu/~tomohara/useful-scripts/ https://github.com/pixelb/scripts - set of utilities written in shell scripts. Last week 02/04/2019 - 02/08/2019 This Week TODO List [ ] Build the bash parser module to the main application(---Move to next week) [ ] Integrate Fei Ding's part in the application (Maybe---Waiting for Hongda rebuild it) [x] Generate 1.000 dot file as the Feiding's project input (Generate 1750 dot files for test) Remove the binary file name in the bash scripts files. Deal with the network commands for wget, ftp, tftp, curl using a different style. (Move the network commands to small parts.) [x] Collect the feedback and change the script data module about remove the Download Binary file name. (Add the assignment) Deal with the unknown commands about the assignment Add the property field and search function in the table. (Change the database). We can use it to analyze the bash scripts in our dataset. Add the export function in the application, we can use it to export the search result in our application. Reduce the Linux commands which used in all the bash scripts by removing the binary file name. Add the code to record commands ===>> bash scripts map. [x] Monitor development: Map the commands in the bash scripts to the IoT driver system call. (Partner: Lavaniyaa. ) Using a strace tool to trace the system call in the Raspbian OS (Finish About ten Linux commands). Each Linux commands we need to write about ten examples to test and record. Example Monitor the system by add module in the Linux kernel(Lavaniyaa). Some links: Raspbian kernel source code, ktrace. Building and Configuring the kernel. Link1, Link2 [X] Write the document to introduce the application framework and how to use the application. Document Next Week Todo Collect the 76 Linux Commands system call in the Raspberry Pi. (Raspbian OS) Discuss with Hongda and Lavaniyaa about how to use the command and system call data to get the mapping. Application Add the code to deal with the if Node or while Node. [Done] Build the bash parser module to the main application. Fix a bug about the \"All commands in the code\" [Done] Update the command class form and add a link in the website[Done] Last week 01/21/2019 - 01/25/2019 Optimized the regular expression to remove the commands which are not the Linux commands in our dataset. (Give a result about how many Linux command used in all the bash scripts exclude the other filename or some commands which are not Linux commands.) [Linux Commands] Changed the application code to help Fei Ding to merge the binary commands name, and use the same names to instead of all the binary commands to reduce the graph node size. Built the bach command classification module in the application. Classification 01/28/2019 - 02/01/2019 Build the script data module which can filter the download file name and remove this information in our graph to reduce complexity for the control flow graph. Work with Hongda API Document Commands Classify: Linux Command, Binary FIle, Unknown Commands, Building Commands(No System Call) Questions Move the network commands to different small parts. How to classify the Linux Commands and the Building Commands (Linux Commands Line Introduce) Check whether there are some unknown commands in our bash scripts. Generate 100 dot file as the Feiding's project input to test. Build development documents share website. NSS Lab Development Documents Relative Link Linux Commands Line Introduce By NSS Lab Clemson            Updated： 2019-05-06 21:32:22 "}}